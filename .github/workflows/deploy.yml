################################################################################
# 📦  CI/CD – Deploy vía SCP                                         #
# --------------------------------------------------------------------------- #
# • Sube el repo al VPS por SCP                                                #
# • Hace backup, rebuild y arranca contenedores vía SSH                        #
# • Si falla, avisa por Telegram y ejecuta rollback                            #
# • Concurrency para que un push no pise a otro                                #
################################################################################

name: DEPLOY

on:
  workflow_run:
    workflows: ["Deploy test"]
    types:
      - completed
  push:
    branches: [main]

# Evita despliegues simultáneos en la misma rama
concurrency:
  group: main
  cancel-in-progress: true

  ###########################################################################
  # 1. SEGURIDAD - Solo escaneo básico (no requiere construcción)           #
  ###########################################################################
  
jobs:
  security-scan:
    runs-on: ubuntu-24.04
    steps:
    - name: 🛎️ Checkout código
      uses: actions/checkout@v4

    - name: 🔍 Escaneo de seguridad con Trivy (TODO EN UNO)
      uses: aquasecurity/trivy-action@0.33.1
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: 0  # No falla el workflow, solo reporta
        scanners: 'vuln,secret'  # ⬅️ Escanea vulnerabilidades y secretos
  
  ###########################################################################
  # 🧪 2. TESTING - Opcional y seguro (no rompe si no hay tests)            #                                                #
  ###########################################################################
  
  tests:
    runs-on: ubuntu-24.04
    needs: security-scan
    defaults:
      run:
        shell: bash
        working-directory: ./api

    steps:
    - name: 🛎️ Checkout código
      uses: actions/checkout@v4

    - name: ⎔ Setup Node.js (necesario para NestJS)
      uses: actions/setup-node@v4
      with:
        node-version: '20-alpine'  # ⚠️ AJUSTAR a la versión
        cache: 'npm'
        cache-dependency-path: api/package-lock.json  # ⚠️ AJUSTAR a la ruta de tu package-lock.json
    - name: 📥 Instalar dependencias (actualizar lock file)
      run: npm install
    - name: 📥 Instalar dependencias (ci)
      run: npm ci  # o npm install si tienes package-lock.json

    - name: 🏗️ Build de la aplicación
      run: npm run build  # Esto ejecuta "nest build"

    - name: 🧪 Ejecutar tests unitarios
      run: npm test -- --passWithNoTests # Ejecuta "jest"

    - name: 📊 Tests de cobertura
      run: npm run test:cov -- --passWithNoTests  # Ejecuta "jest --coverage"

    # - name: 🔍 Tests e2e (opcional)
    #   run: npm run test:e2e -- --passWithNoTests  # Si quieres ejecutar end-to-end tests

  ###########################################################################
  # 🚀 3. DEPLOY                                                            #
  ###########################################################################

  deploy:
    needs: tests # Espera las verificaciones de tests
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'push')
    runs-on: ubuntu-24.04
    environment: staging

    steps:
    - name: 🛎️ Checkout código
      uses: actions/checkout@v4

    - name: 🧹 Eliminar carpeta .git antes de transferir
      run: |
        rm -rf .git
        # Limpieza segura - solo elimina lo innecesario
        find . -name "*.log" -delete 2>/dev/null || true
        find . -name ".DS_Store" -delete 2>/dev/null || true
        echo "✅ Archivos temporales eliminados"

    - name: 📤 Transferir archivos al VPS
      uses: appleboy/scp-action@v1
      with:
        host:     ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        port:     ${{ secrets.SSH_PORT }}
        key:      ${{ secrets.SSH_PRIVATE_KEY }}
        source:   "./"
        target:   "/mnt/Data/control-pase-azumat"
        strip_components: 1

    - name: 🚀 Ejecutar despliegue en VPS
      uses: appleboy/ssh-action@v1.2.2
      id: deploy
      with:
        host:     ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key:      ${{ secrets.SSH_PRIVATE_KEY }}
        port:     ${{ secrets.SSH_PORT }}
        script: |
          set -euo pipefail
          PROJECT_DIR="/mnt/Data/control-pase-azumat"
          BACKUP_ROOT="/mnt/Data/control-pase-backups"

          echo "🔍 Verificando directorio..."
          ls -la "$PROJECT_DIR" || echo "⚠️ Directorio no accesible"

          # 📊 MÉTRICAS - Inicio de despliegue
          DEPLOY_START=$(date +%s)
          echo "🏁 Iniciando despliegue a las $(date)"

          # ---------- BACKUP ----------
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BACKUP_DIR="$BACKUP_ROOT/$TIMESTAMP"
          mkdir -p "$BACKUP_DIR"
          echo "📦 Creando backup en $BACKUP_DIR"
          
          # Backup más eficiente
          cd "$PROJECT_DIR"
          tar --exclude='db-data' --exclude='backups' --exclude='node_modules' \
              --exclude='.git' -czf "$BACKUP_DIR/backup.tar.gz" .
          echo "✅ Backup creado: $BACKUP_DIR/backup.tar.gz"

          # Borrar backups más antiguos de 7 días
          find "$BACKUP_ROOT" -name "*.tar.gz" -mtime +7 -delete
          echo "🗑️ Backups >7 días eliminados"

          # 🐳 DESPLIEGUE CON VERIFICACIÓN
          echo "🚀 Iniciando despliegue de contenedores..."
          docker-compose down 2>/dev/null || echo "ℹ️ No hay contenedores ejecutándose"
          docker-compose up -d --build
          
          # ⏱️ Esperar inicialización
          echo "⏳ Esperando que los contenedores se inicien..."
          sleep 15

          # 🔍 VERIFICACIÓN DE ESTADO (MEJORADO)
          echo "🔍 Verificando estado de los servicios..."
          if docker-compose ps | grep -q "Up"; then
            echo "✅ Contenedores en ejecución"
            
            # Verificación adicional de salud (adaptar según tu app)
            if docker-compose logs --tail=10 | grep -i "error"; then
              echo "⚠️ Se detectaron errores en logs"
            else
              echo "✅ No se detectaron errores en logs"
            fi
          else
            echo "❌ Algunos contenedores no están funcionando"
            docker-compose ps
            exit 1
          fi

          # 📊 MÉTRICAS - Fin de despliegue
          DEPLOY_END=$(date +%s)
          DEPLOY_DURATION=$((DEPLOY_END - DEPLOY_START))
          echo "📈 Duración total: ${DEPLOY_DURATION} segundos"

          # 🧹 Limpieza conservadora
          docker system prune -f --filter "until=48h"
          echo "🧹 Limpieza de Docker completada"

    - name: 📣 Notificar resultado
      if: always()  # Se ejecuta siempre (éxito o fallo)
      env:
        TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID }}
        COMMIT_URL: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
        WORKFLOW_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          EMOJI="✅"
          TEXTO_ESTADO="exitosa"
        else
          EMOJI="❌"
          TEXTO_ESTADO="fallida"
        fi

        MSG="$EMOJI *Despliegue $TEXTO_ESTADO - Staging*
        • *Repo:* ${{ github.repository }}
        • *Commit:* ${GITHUB_SHA:0:8}
        • *Ejecución:* [Ver detalles]($WORKFLOW_URL)
        • *Hora:* $(date -u +'%H:%M:%S UTC')

        _Estado del pipeline: ${{ job.status }}_"

        curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
          -d chat_id="$TELEGRAM_CHAT" \
          --data-urlencode "text=$MSG" \
          -d parse_mode="Markdown" > /dev/null
